(define (domain hospital)
	(:types location room robot door sensor)
	(:predicates
		(at ?r - robot ?l - location)
		(open ?d - door)
		(hasdoor ?rm - room ?d - door)
		(attr ?l - location ?rm - room)
		(heartrate ?s - sensor)
		(oxygenation ?s - sensor)
		(temperature ?s - sensor)
		(glucose ?s - sensor)
	)
	(:functions
		(calc-time ?r - robot ?l1 ?l2 - location)
	)
	(:rewards time)

	(:task VisitRoom :parameters (?r - robot ?loc ?rm-door ?rm-inside - location ?rm - room ?d - door))
	(:task RequestHelp :parameters (?r - robot ?l - location ?rm - room ?d - door))
	(:task EnterRoom :parameters (?r - robot ?rm - room ?d - door ?rm-door ?rm-inside - location))
	(:task ApproachPatient :parameters (?r - robot ?rm - room ?rm-inside ?ploc - location))
	(:task CheckInfectiousDisease :parameters (?r - robot ?hr ?bo ?t - sensor ?ploc - location))
	(:task ChecPostSurgical :parameters (?r - robot ?hr ?bo - sensor ?ploc - location))
	(:task CheckDiabetes :parameters (?r - robot ?g - sensor ?ploc - location))
	(:task RaiseAlarm :parameters (?r - robot ?loc - location))
	(:task SterilizeRobot :parameters (?r - robot ?rloc ?sloc - location))

	(:method visit-room
		:parameters (?r - robot ?loc ?rm-door ?rm-inside - location ?rm - room ?d - door)
		:task (VisitRoom ?r ?loc ?rm ?d)
		:precondition(and
			(attr ?rm-door ?rm))
		:ordered-subtasks(and
			(move ?r ?loc ?rm-door)
			(EnterRoom ?r ?rm ?d ?rm-door ?rm-inside))
	)

	(:method approach-patient
		:parameters (?r - robot ?rm - room ?rm-inside ?ploc - location)
		:task (ApproachPatient ?r ?rm ?rm-inside ?ploc)
		:precondition (and
			(attr ?rm-inside ?rm)
			(at ?r ?rm-inside))
		:ordered-subtasks(and 
			(move ?r ?rm-inside ?ploc))
	)

	(:method enter-room-door-closed
		:parameters (?r - robot ?rm - room ?d - door ?rm-door ?rm-inside - location)
		:task (EnterRoom ?r ?rm ?d ?rm-door ?rm-inside)
		:precondition (and
			(hasdoor ?rm ?d)
			(not (open ?d))
			(attr ?rm-door ?rm)
			(attr ?rm-inside ?rm))
		:ordered-subtasks(and
			(RequestHelp ?r ?rm-door)
			(EnterRoom ?r ?rm ?d ?rm-door ?rm-inside))
	)

	(:method enter-room-door-open
		:parameters (?r - robot ?rm - room ?d - door ?rm-door ?rm-inside - location)
		:task (EnterRoom ?r ?rm ?d ?rm-door ?rm-inside)
		:precondition (and
			(hasdoor ?rm ?d)
			(open ?d)
			(attr ?rm-door ?rm)
			(attr ?rm-inside ?rm))
		:ordered-subtasks(move ?r ?rm-door ?rm-inside)
	)

	(:method request-help
		:parameters (?r - robot ?l - location ?rm - room ?d - door)
		:task (RequestHelp ?r ?l ?d)
		:precondition(and
			(hasdoor ?rm ?d)
			(attr ?l ?rm))
		:ordered-subtasks(and 
			(raise-alarm ?r ?l)
			(opendoor ?d))
	)

	(:method check-infectious-disease
		:parameters (?r - robot ?hr ?bo ?t - sensor ?ploc - location)
		:task (CheckInfectiousDisease ?r ?hr ?bo ?t ?ploc)
		:precondition (and
			(at ?r ?ploc))
		:ordered-subtasks(and
			(measure-heart-rate ?ploc ?hr)
			(measure-oxygenation ?ploc ?bo)
			(measure-temperature ?ploc ?t)
		)
	)

	(:method check-post-surgical
		:parameters (?r - robot ?hr ?bo - sensor ?ploc - location)
		:task (CheckPostSurgical ?r ?hr ?bo ?ploc)
		:precondition (and
			(at ?r ?ploc))
		:ordered-subtasks(and
			(measure-heart-rate ?ploc ?hr)
			(measure-oxygenation ?ploc ?bo)
		)
	)

	(:method check-diabetes
		:parameters (?r - robot ?g - sensor ?ploc - location)
		:task (CheckPostSurgical ?r ?g ?ploc)
		:precondition (and
			(at ?r ?ploc))
		:ordered-subtasks(and
			(measure-glucose-level ?g ?ploc)
		)
	)

	(:method raise-alarm-m
		:parameters (?r - robot ?loc - location)
		:task (RaiseAlarm ?r ?loc)
		:ordered-subtasks(and
			(raise-alarm ?r ?loc)
		)
	)

	(:method sterilize-robot
		:parameters (?r - robot ?rloc ?sloc - location)
		:task (SterilizeRobot ?r ?rloc ?sloc)
		:ordered-subtasks(and
			(move ?r ?rloc ?sloc)
			(wait-for-sterilization ?r ?sloc)
		)
	)

	(:action move
		:parameters (?r - robot ?l1 ?l2 - location)
		:precondition (at ?r ?l1)
		:effect (and
			(not (at ?r ?l1))
			(at ?l2)
			(rewardchange increase (time) (calc-time ?r ?l1 ?l2)))
		:reliability (relMove 0.95)
	)

	(:action raise-alarm
		:parameters (?r - robot ?l - location)
		:precondition (at ?r ?l)
		:effect (and
			(rewardchange increase (time) 30))
		:reliability (relAlarm 0.99)
	)

	(:action opendoor
		:parameters (?d - door)
		:effect (open ?d)
	)

	(:action measure-heart-rate
		:parameters(?ploc - location ?hr - sensor)
		:precondition(and
			(heartrate ?hr))
		:effect (and
			(rewardchange increase (time) 10))
		:reliability (relHR 0.99)
	)

	(:action measure-oxygenation
		:parameters(?ploc - location ?bo - sensor)
		:precondition(and
			(oxygenation ?bo))
		:effect (and
			(rewardchange increase (time) 10))
		:reliability (relOxy 0.99)
	)

	(:action measure-temperature
		:parameters(?ploc - location ?t - sensor)
		:precondition(and
			(temperature ?t))
		:effect (and
			(rewardchange increase (time) 30))
		:reliability (relTemp 0.99)
	)

	(:action measure-glucose-level
		:parameters(?ploc - location ?g - sensor)
		:precondition(and
			(glucose ?g))
		:effect (and
			(rewardchange increase (time) 10))
		:reliability (relGluc 0.99)
	)

	(:action wait-for-sterilization
		:parameters (?r - robot ?sloc - location)
		:precondition(and
			(at ?r ?sloc))
		:effect (and
			(rewardchange increase (time) 60))
	)
)